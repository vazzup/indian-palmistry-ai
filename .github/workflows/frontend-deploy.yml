name: Frontend CI/CD Pipeline

on:
  push:
    branches: [main, staging]
    paths: ['frontend/**']
  pull_request:
    branches: [main]
    paths: ['frontend/**']

env:
  NODE_VERSION: '18'
  FRONTEND_DIR: './frontend'

jobs:
  test:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci
      
      - name: Run type checking
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run type-check
          
      - name: Run linting
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run lint
          
      - name: Run unit tests
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run test -- --coverage --watchAll=false
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ${{ env.FRONTEND_DIR }}/coverage/lcov.info
          flags: frontend
          
      - name: Build application
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}
          
      - name: Install Playwright browsers
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npx playwright install --with-deps
          
      - name: Run E2E tests
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci
        
      - name: Run npm audit
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm audit --audit-level moderate
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          command: test

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci
          
      - name: Build for production
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          NEXT_PUBLIC_ENABLE_ANALYTICS: true
          NEXT_PUBLIC_SITE_URL: ${{ secrets.PRODUCTION_URL }}
          
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ${{ env.FRONTEND_DIR }}
          vercel-args: '--prod'
          
      - name: Run post-deployment tests
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: ${{ secrets.PRODUCTION_URL }}

  performance-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '${{ env.FRONTEND_DIR }}/lighthouserc.js'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  staging-deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci
          
      - name: Build for staging
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}
          NEXT_PUBLIC_ENABLE_ANALYTICS: false
          
      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ${{ env.FRONTEND_DIR }}
          vercel-args: '--target staging'